import java.util.*;
public class HashmapProblem 
{
	public static int smallestSubsegment(int[] A, int n)
	{
		HashMap<Integer,Integer> freq = new HashMap<Integer,Integer>();
		HashMap<Integer,Integer> first_o = new HashMap<Integer,Integer>();
		
		int hfreq=0;
		int s=0;
		int e=0;
		int min_len=e-s+1;
	
		for(int i=0;i<n;i++)
		{
			if(freq.containsKey(A[i]))
			{
				freq.put(A[i],freq.getOrDefault(A[i],0)+1);
			}
			else
			{
				freq.put(A[i],1);
				first_o.put(A[i],i);
			}
			
			if(hfreq<freq.get(A[i]))
			{
				hfreq=freq.get(A[i]);
				s=first_o.get(A[i]);
				e=i;
				min_len = e-s+1;
			}
			else if(hfreq==freq.get(A[i]))
			{
				s = first_o.get(A[i]);
				e = i;
				int clen = e-s+1;
				if(min_len>clen)
					min_len=clen;
			}
		}
		return min_len;
	}
	public static void main(String[] args) 
	{
		int A[] = { 1,2,2,3,1 };
        int n = A.length;
        System.out.println(smallestSubsegment(A, n));
	}
}
