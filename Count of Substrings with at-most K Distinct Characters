//Count of Substrings with at-most K Distinct Characters
import java.util.*;
public class HashmapProblem 
{
	public static int countSubstringatmostK(String s,int k)
	{
		HashMap<Character,Integer> map = new HashMap<Character,Integer>();
		
		int count=0;
		int i =-1;
		int j=-1;
		
		while(true)
		{
			boolean f1 = false;
			boolean f2 = false;
			
			while(i<s.length()-1)
			{
				f1 = true;
				i++;
				char ch = s.charAt(i);
				map.put(ch, map.getOrDefault(ch, 0)+1);
				
				if(map.size()<=k)
					count+=i-j;
				else if(map.size()>k)
					break;
			}
			while(j<i)
			{
				f2=true;
                j++;
                char ch = s.charAt(j);
                if(map.get(ch)==1)
                    map.remove(ch);
                else
                    map.put(ch,map.get(ch)-1);
                
                if(map.size()==k)
                	count+=i-j;
                else if(map.size()<k)
                	break;
			}
			
			if(f1==false &&  f2==false)
				break;
		}
		return count;
	}
	public static void main(String[] args) 
	{
		String str = "aabcbcdbca";
		int k =2;
		
		System.out.println(countSubstringatmostK(str,k));
	}
}
