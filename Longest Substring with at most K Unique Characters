// Here we have at most

import java.util.*;
public class HashmapProblem 
{
	public static int longestSubstring(String s,int k)
	{
        HashMap<Character,Integer> map = new HashMap<>();
        int i=-1;
        int j=-1;
        int max=-1;
        int max_len=Integer.MIN_VALUE;
        
        while(true)
        {
            boolean f1 = false;
            boolean f2 = false;
            while(i<s.length()-1)
            {
                f1=true;
                i++;
                char ch = s.charAt(i);
                if(map.containsKey(ch))
                {
                	map.put(ch, map.get(ch)+1);
                }
                else
                	map.put(ch,1);
                
                if(map.size()<=k)
                {
                   max =i-j;
                   if(max_len<max)
                      max_len=max;
                }
                else
                   break;
            }
            while(j<i)
            {
                f2=true;
                j++;
                char ch = s.charAt(j);
                if(map.get(ch)==1)
                    map.remove(ch);
                else
                    map.put(ch,map.get(ch)-1);

                if(map.size()==k)
                {
                	max =i-j;
                    if(max_len<max)
                       max_len=max;
                }
                if(map.size()<k)
                    break;
            }
            if(f1==false && f2==false)
               break;
        }
        return max;
	}
	public static void main(String[] args) 
	{
		String s = "aabacbebebe";
        int k = 3;
        System.out.println(longestSubstring(s, k));
	}
}
